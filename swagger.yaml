swagger: "2.0"
info:
  version: 1.0.0
  title: pokemon-betting-api-yellow
  description: Pokemon betting api using swagger-2.0 specification
  termsOfService: http://swagger.io/terms/
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: petstore.swagger.io # TODO change
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    get:
      description: Get all users
      operationId: findUsers
      responses:
        200:
          description: user response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new user.  Duplicates are allowed
      operationId: addUser
      parameters:
        - name: user
          in: body
          description: User to add
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        200:
          description: user response
          schema:
            $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}:
    get:
      description: Returns a user based on a single ID
      operationId: find user by id
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          $ref: '#/definitions/Id'
      responses:
        200:
          description: user response
          schema:
            $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}/achievements:
    get:
      description: Returns the achievements of a user based on a single ID
      operationId: find achievement by user id
      parameters:
        - name: id
          in: path
          description: ID of user whose achievements to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: achievement response
          schema:
            type: array
            items:
              $ref: '#/definitions/Achievement'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}/withdraw/{amount}:
    post:
      description: Withdraw money from a user's balance
      parameters:
        - name: id
          in: path
          description: ID of the user to withdraw money from
          required: true
          $ref: '#/definitions/Id'
        - name: amount
          in: path
          description: Amount of money to withdraw in ₽
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: ok
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}/deposit/{amount}:
    post:
      description: Deposit money to a user's balance
      parameters:
        - name: id
          in: path
          description: ID of the user to deposit money to
          required: true
          $ref: '#/definitions/Id'
        - name: amount
          in: path
          description: Amount of money to deposit in ₽
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: ok
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /achievements:
    get:
      description: Get all achievements
      operationId: findAchievement
      responses:
        200:
          description: achievement response
          schema:
            type: array
            items:
              $ref: '#/definitions/Achievement'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /battles:
    get:
      description: Get all battles
      operationId: findBattle
      responses:
        200:
          description: battle response
          schema:
            type: array
            items:
              $ref: '#/definitions/Battle'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /battles/{id}:
    get:
      description: Returns a battle based on a single ID
      operationId: findBattle
      parameters:
        - name: id
          in: path
          description: ID of the battle to fetch
          required: true
          $ref: '#/definitions/Id'
      responses:
        200:
          description: battle response
          schema:
            $ref: '#/definitions/Battle'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  User:
    allOf:
      - $ref: '#/definitions/NewUser'
      - required:
        - id
        properties:
          id:
            $ref: '#/definitions/Id'
          balance:
            type: integer
            format: int64
  NewUser:
    required:
      - username
      - email
      - password
    properties:
      username:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
        #format: password
  Battle:
    required:
      - id
      - start_time
      - end_time
      - team1
      - team2
    properties:
      id:
        $ref: '#/definitions/Id'
      start_time:
        type: string
        format: date-time
      end_time:
        type: string
        format: date-time
      team1:
        $ref: '#/definitions/Team'
      team2:
        $ref: '#/definitions/Team'
  Team:
    required:
      - pokemons
      - trainer
    properties:
      pokemons:
        type: array
        items:
          $ref: '#/definitions/Pokemon'
      trainer:
        $ref: '#/definitions/Trainer'
  Pokemon:
    required:
      - id
      - name
    properties:
      id:
        $ref: '#/definitions/Id'
        maximum: 721 # Currently there are only 721 pokémons in the pokéapi
      name:
        type: string
  Trainer:
    required:
      - id
      - country_code
      - gender
      - name
    properties:
      id:
        $ref: '#/definitions/Id'
      country_code:
        type: string
        pattern: '^(A(BW|FG|GO|IA|L(A|B)|N(D|T)|R(E|G|M)|SM|T(A|F|G)|U(S|T)|ZE)|B(DI|E(L|N)|FA|G(D|R)|H(R|S)|IH|L(M|R|Z)|MU|OL|R(A|B|N)|TN|VT|WA)|C(A(F|N)|CK|H(E|L|N)|IV|MR|O(D|G|K|L|M)|PV|RI|UB|XR|Y(M|P)|ZE)|D(EU|JI|MA|NK|OM|ZA)|E(CU|GY|RI|S(H|P|T)|TH)|F(IN|JI|LK|R(A|O)|SM)|G(AB|BR|EO|GY|HA|I(B|N)|LP|MB|NQ|NB|R(C|D|L)|TM|U(F|M|Y))|H(KG|MD|ND|RV|TI|UN)|I(DN|MN|ND|OT|R(L|N|Q)|S(L|R)|TA)|J(AM|EY|OR|PN)|K(AZ|EN|GZ|HM|IR|NA|OR|WT)|L(AO|B(N|R|Y)|CA|IE|KA|SO|TU|UX|VA)|M(A(C|F|R)|CO|D(A|G|V)|EX|HL|KD|L(I|T)|MR|N(E|G|P)|OZ|RT|SR|TQ|US|WI|Y(S|T))|N(AM|CL|ER|FK|GA|I(C|U)|LD|OR|PL|RU|ZL)|OMN|P(A(K|N)|CN|ER|HL|LW|NG|OL|R(I|K|T|Y)|SE|YF)|QAT|R(EU|OU|US|WA)|S(AU|DN|EN|G(P|S)|HN|JM|L(B|E|V)|MR|OM|PM|RB|TP|UR|V(K|N)|W(E|Z)|Y(C|R))|T(C(A|D)|GO|HA|JK|K(L|M)|LS|ON|TO|U(N|R|V)|WN|ZA)|U(EN|GA|KR|MI|RY|SA|ZB)|V(AT|CT|GB|IR|NM|UT)|W(LF|SM)|YEM|Z(AF|MB|WE))$' # Pattern for matching ISO 3166-1 alfa-3 country codes
      gender:
        type: string
        pattern: '^(male|female)$'
      name:
        type: string
  Achievement:
    required:
      - id
      - name
      - description
    properties:
      id:
        $ref: '#/definitions/Id'
      name:
        type: string
      description:
        type: string
  Id:
    type: integer
    format: int64
    minimum: 0
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
