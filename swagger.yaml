swagger: "2.0"
info:
  version: 1.0.0
  title: pokemon-betting-api-yellow
  description: Pokemon betting api using swagger-2.0 specification
  termsOfService: http://swagger.io/terms/
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: petstore.swagger.io # TODO change
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    get:
      description: Get all users
      operationId: findUsers
      responses:
        200:
          description: user response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new user.  Duplicates are allowed
      operationId: addUser
      parameters:
        - name: user
          in: body
          description: User to add
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        200:
          description: user response
          schema:
            $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}:
    get:
      description: Returns a user based on a single ID
      operationId: find user by id
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: user response
          schema:
            $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}/achievements:
    get:
      description: Returns the achievements of a user based on a single ID
      operationId: find achievement by user id
      parameters:
        - name: id
          in: path
          description: ID of user whose achievements to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: achievement response
          schema:
            type: array
            items:
              $ref: '#/definitions/Achievement'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}/withdraw/{amount}:
    post:
      description: Withdraw money from a user's balance
      parameters:
        - name: id
          in: path
          description: ID of the user to withdraw money from
          required: true
          type: integer
          format: int64
        - name: amount
          in: path
          description: Amount of money to withdraw in ₽
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: ok
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{id}/deposit/{amount}:
    post:
      description: Deposit money to a user's balance
      parameters:
        - name: id
          in: path
          description: ID of the user to deposit money to
          required: true
          type: integer
          format: int64
        - name: amount
          in: path
          description: Amount of money to deposit in ₽
          required: true
          type: integer
          format: int64
      responses:
        204:
          description: ok
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /achievements:
    get:
      description: Get all achievements
      operationId: findAchievement
      responses:
        200:
          description: achievement response
          schema:
            type: array
            items:
              $ref: '#/definitions/Achievement'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /battles:
    get:
      description: Get all battles
      operationId: findBattle
      responses:
        200:
          description: battle response
          schema:
            type: array
            items:
              $ref: '#/definitions/Battle'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /battles/{id}:
    get:
      description: Returns a battle based on a single ID
      operationId: findBattle
      parameters:
        - name: id
          in: path
          description: ID of the battle to fetch
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: battle response
          schema:
            $ref: '#/definitions/Battle'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  User:
    allOf:
      - $ref: '#/definitions/NewUser'
      - required:
        - id
        properties:
          id:
            $ref: '#/definitions/Id'
          balance:
            type: integer
            format: int64
  NewUser:
    required:
      - username
      - email
      - password
    properties:
      username:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
        #format: password
  Battle:
    required:
      - id
      - start_time
      - end_time
      - team1
      - team2
    properties:
      id:
        $ref: '#/definitions/Id'
      start_time:
        type: string
        format: date-time
      end_time:
        type: string
        format: date-time
      team1:
        $ref: '#/definitions/Team'
      team2:
        $ref: '#/definitions/Team'
  Team:
    required:
      - pokemons
      - trainer
    properties:
      pokemons:
        type: array
        items:
          $ref: '#/definitions/Pokemon'
      trainer:
        $ref: '#/definitions/Trainer'
  Pokemon:
    required:
      - id
      - name
    properties:
      id:
        $ref: '#/definitions/Id'
      name:
        type: string
  Trainer:
    required:
      - id
      - country_code
      - gender
      - name
    properties:
      id:
        $ref: '#/definitions/Id'
      country_code:
        type: string
      gender:
        type: string
      name:
        type: string
  Achievement:
    required:
      - id
      - name
      - description
    properties:
      id:
        $ref: '#/definitions/Id'
      name:
        type: string
      description:
        type: string
  Id:
    type: integer
    format: int64
    minimum: 0
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
